//Лекции по джава
/*Поскольку базовые курсы JS в разных источниках отличаются:
В каких то объяснения не полные, в других непоследовательные, 
в третьих важные моменты упущены, 
в четвертых выясняются свойства каких то функций 
которых небыло в первых трех...
Короче при конспекте в тетради начала получатся каша.
Поэтому решил вести конспект прям в Visual Studio, 
Благодоря "разноцветному" коду легко читается, и можно скопировать
в ворд например, с сохранением цветов.


/*Комментарии — это строки кода, 
которые JavaScript игнорирует, нужны для заметок.
Есть два способа написать комментарий:
    1 - // это если комментарий идет в одной строке*/
    
/*2 если комментарий идет в несколько строк
    выделяем его этими знаками коммент */

/* JavaScript имеет восемь типов данных : 
undefined, - неопределено
null, - нуль (можно использовать чтоб указать что в данный момент значения нет)
boolean, - логический тип (true и false)
string, - строки
symbol, - символ
bigint, 
number - число
object.*/

// ПЕРЕМЕННЫЕ - позволяют динамически хранить у управлять данными.
//переменные можно присвоить с помощью:
var
let
const
//пример:
var myAge; // мы объявили переменную myAge

// переменной можно присвоить значение с помощью =
myAge = 35; /* переменная myAge имеет значение 35, 
при присваивании чилового значения, переменная автоматически
имеет тип числовой тип данных "number"*/

// одной переменной можно присвоить значение другой переменной
bestAge = myAge; // переменная bestAge будет иметь значение 35

// переменной можно присвоить значение сразу при объявлении:
var myName = "Ruslan"; /*значение в ковычках - строки*/ 

// для JS это не одно и тоже:
string = "35";
noString = 35;

// JavaScript чувствителен к регистру:
MYVAR
MyVar
myvar
//эти разные переменные.

// Разница между var let const
var myVar = 5; /* если объявить с помощью var
то можно будет снова обявить переменную с этим же именем
даже с другим значением: */
var myVar = 7; // 
console.log(myVar); // выведет 7

let myVar = 5; /* если обявить с помощью let, 
то мы не сможем еще раз обявить переменную с таким именем*/
let myVar = 8; // выдаст ошибку, что такая переменная уже есть. ОДНАКО!
myVar = 8; // изменит переменную myVar на 8

const myVar = 5; /* при объявлении с помощью const, 
нельзя ни объявить еще раз переменную с таким именем, 
ни изменить значение переменной */
const myVar = 8; // выдаст ошибку
myVar = 8; // выдаст ошибку

// Number - числовые данные

+ // сложение
const myVar = 5 + 10; 

- // вычетание 
const myVar = 12 - 6; // myVar будет иметь значение 6.

* // умножение
const myVar = 13 * 13; // myVar будет иметь значение 169.

/ // деление
const myVar = 16 / 2; // myVar теперь имеет значение 8.

% // остаток от деления
5 % 2 = 1, /* потому что    (5 / 2) = 2 (частное)
                            2 * 2 = 4
                            5 - 4 = 1 (остаток) */
//Числа могут быть десятичными (числа с плавающей точкой)
const ourDecimal = 5.7;
// с этими числами можно делать все тоже самое что и с обычными.

// Изменения чисел

// увеличение числа:
i++; // повышает значение i на единицу
i = i + 1; // тоже самое что и i++

// уменьшение числа:
i--; // уменьшает значение на i на единицу
i = i - 1; // тоже самое что и i--

// Значения переменной можно так же изменить на желаемое число:

+= // повысит значение на

-= // понизит значение на
*= // умножит значение на
/= // разделит значение на
//примеры:
let myVar = 1;
myVar += 5;
console.log(myVar); // выдаст 6

myVar -= 5; // понизит на 5 и т.д.

// Как сохранить ковычки в выводимом тексте
const sampleStr = "Alan said, \"Peter is learning JavaScript\"."; // выдаст:
// Alan said, "Peter is learning JavaScript".
/* мы просто поставили обратный слеш перед ковычкой, 
которую хотели увидеть в тексте.*/

/* Еще о ковычках:
в JS одинарные и двойные ковычки ведут себя одинаково:*/
const doubleQuoteStr = "This is a string"; 
const singleQuoteStr = 'This is also a string';
// можно использовать два вида ковычек что бы получить ковычки при выводе:
const conversation = 'Finn exclaims to Jake, "Algebraic!"';
// однако вот тут это не получится:
const badStr = 'Finn responds, "Let's go!"';
// выдаст ошибку, символ ' в Let's JS посчитал как ковычку и законченную строку
// в этом случае опять используем обратный слеш:
const goodStr = 'Jake asks Finn, "Hey, let\'s go on an adventure?"';
// выдаст результат: Jake asks Finn, "Hey, let's go on an adventure?"

/* 
Escape-последовательности в строках:
\'	одинарная кавычка
\"	двойная кавычка
\\	обратная косая черта
\n	новая строка
\t	отуступ, табуляция
\r	возврат каретки (что за хрень хз пока)
\b	граница слова (тоже хз)
\f	подача формы (опять хз)

*/
const myStr = "FirstLine\n\t\\SecondLine\nThirdLine"; // результат будет:
FirstLine
	\SecondLine
ThirdLine

